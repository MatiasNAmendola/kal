{"name":"Kal","tagline":"A powerful, easy-to-use, and easy-to-read programming language for the future","body":"# Kal\r\n\r\nKal is a highly readable, easy-to-use language that compiles to JavaScript. It's designed to be asynchronous and can run both on [node.js](http://nodejs.org/) and in the browser. Kal makes asynchronous programming easy and clean by allowing functions to [pause and wait for I/O](#asynchronous-wait-for), replacing an awkward callback syntax with a clean, simple syntax.\r\n\r\nKal is also _expressive_ and offers many useful synonyms and constructs to make code readable in almost plain English.\r\n\r\nKal is designed with a unique philosophy:\r\n\r\n 1. Eliminate the yucky parts of JavaScript, but keep the good stuff including the compatibility, and the great server and client runtime support.\r\n 2. Make code as readable as possible and make writing code straightforward. Eliminate the urge (and the need) to be terse and complicated.\r\n 3. Provide an alternative to callbacks (which look weird) and promises (which are weird) while providing excellent, easy-to-use asynchronous support.\r\n\r\nCheck out the [examples](https://github.com/rzimmerman/kal/tree/master/examples) for some sample use cases.\r\n\r\n## Links\r\n\r\n* [Examples](https://github.com/rzimmerman/kal/tree/master/examples)\r\n* [Novel Features](#asynchronous-wait)\r\n* [Full Syntax and Readme](https://github.com/rzimmerman/kal/blob/master/README.md)\r\n\r\n## Asynchronous Wait\r\n\r\nThe `wait for` directive allows a function to pause asynchronously, then resume when a task is complete. For example, the following JavaScript:\r\n```javascript\r\nvar getUserFriends(userName, next) {\r\n    db.users.findOne({name:userName}, function (err, user) {\r\n        if (err != null) return next(err);\r\n        db.friends.find({userId:user.id}, function (err, friends) {\r\n            if (err != null) return next(err);\r\n            return next(null, friends);\r\n        });\r\n    });\r\n}\r\n```\r\n\r\nwould be equivalent to this in Kal:\r\n\r\n```kal\r\n    task getUserFriends = function (userName)\r\n      wait for user from db.users.findOne {name:userName}\r\n      wait for friends from db.friends.find {userId:user.id}\r\n      return friends\r\n```\r\n\r\nThis includes error handling via callbacks. Consider a more complicated example:\r\n\r\n```javascript\r\nasync = require('async');\r\n\r\nvar getUserFriends = function (userName, next) {\r\n    db.users.findOne({name:userName}, function (err, user) {\r\n        if (err != null) return next(err);\r\n        getFriendsById(userId, function (err, friends) {\r\n            if (err != null) return next(err);\r\n            if (user.type == 'power user') {\r\n                async.map(friends, getFriendsById, function (err, friendsOfFriends) {\r\n                    for (var i = 0; i < friendsOfFriends.length; i++) {\r\n                        for (var j = 0; j < friendsOfFriends[i].length; j++) {\r\n                            if (friends.indexOf(friendsOfFriends[i][j]) != -1) {\r\n                                friends.push(friendsOfFriends[i][j]);\r\n                            }\r\n                        }\r\n                    }\r\n                    return next(null, friends);\r\n                });\r\n            } else {\r\n                return next(null, friends);\r\n            }\r\n        });\r\n    });\r\n}\r\nvar getFriendsById = function (userId, next) {\r\n    db.friends.find({userId:userId}, function (err, friends) {\r\n        if (err != null) return next(err);\r\n        return next(null, friends);\r\n    });\r\n}\r\n```\r\n\r\nEven using [async](https://github.com/caolan/async), it's lot. Here's the equivalent Kal:\r\n\r\n```kal\r\ntask getUserFriends(userName)\r\n  wait for user from db.users.findOne {name:userName}\r\n  wait for friends from db.friends.find {userId:user.id}\r\n  if user.type is 'power user'\r\n    for parallel friend in friends\r\n      wait for friendsOfFriend from db.friends.find friend\r\n      for newFriend in friendsOfFriend\r\n        friends.push newFriend unless newFriend in friends\r\n  return friends\r\n```\r\n\r\nThere are no additional libraries required and everything's a lot more ... vertical. Notice that the `wait for` statement works in loops, `if` statements, `try`/`catch` blocks, and all nested permutations. It's completely JavaScript compatible - `getUserFriends` would be called the same way and call back with the same results.\r\n\r\n## Installation Using npm\r\n\r\nThis is the preferred method for installing Kal. Make sure you have installed [node.js](http://nodejs.org/). Kal works with versions 0.6, 0.8, and 0.10. It might work with other versions as well. Install the latest \"stable\" release of Kal using npm:\r\n\r\n```\r\nsudo npm install -g kal\r\n```\r\n\r\n`sudo` may not be required depending on how you installed `node`.\r\n\r\n## Syntax Highlighting\r\n\r\nA [TextMate bundle](https://github.com/rzimmerman/kal.tmbundle) for TextMate and Sublime Text is available with limited but very useful support for Kal's syntax.\r\n","google":"UA-43261810-1","note":"Don't delete this file! It's used internally to help with page regeneration."}
ast = require './ast'
ASTBase = ast.ASTBase

KEYWORDS = ['true','false','yes','no','on','off','function','return','if','unless','except','when','otherwise','and','or','but','xor','not','new','while','for','else','method','class','exists','doesnt','exist',              'is','isnt','inherits','from','nothing','empty','null','break','try','catch','throw','raise','arguments','of']


class File inherits from ASTBase
  method parse()
    me.lock()
    me.statements = me.opt_multi Statement
    me.req 'EOF'
    
class Block inherits from ASTBase
  method parse()
    me.req 'NEWLINE'
    me.req 'INDENT'
    me.lock()
    me.statements = me.opt_multi Statement
    me.req 'DEDENT'
    
class Statement inherits from ASTBase
  method parse()
    me.statement = me.req TryCatch, ClassDefinition, ReturnStatement, IfStatement, WhileStatement, ForStatement, DeclarationStatement, AssignmentStatement, ExpressionStatement, BlankStatement
  
class ReturnStatement inherits from ASTBase
  method parse()
    me.req_val 'return'
    me.lock()
    me.expr = me.opt Expression
    me.req 'NEWLINE'
    me.conditional = me.expr.transform_when_statement()
    
class IfStatement inherits from ASTBase
  method parse()
    me.condition = me.req_val 'if', 'unless', 'when', 'except'
    me.lock()
    me.req_val('when') when (me.condition.value is 'except')
    me.conditional = me.req Expression
    me.true_block = me.req Block, Statement
    me.else_block = me.opt ElseStatement
    
class ElseStatement inherits from ASTBase
  method parse()
    me.req_val 'else', 'otherwise'
    me.lock()
    me.false_block = me.req Block, Statement
    
class WhileStatement inherits from ASTBase
  method parse()
    me.req_val 'while'
    me.lock()
    me.expr = me.req Expression
    me.block = me.req Block
    
class ForStatement inherits from ASTBase
  method parse()
    me.req_val 'for'
    me.lock()
    me.iterant = me.req UnaryExpression
    me.type = me.req_val 'in', 'of'
    me.iterable = me.req Expression
    me.loop_block = me.req Block
    
class DeclarationStatement inherits from ASTBase
  method other()
    return ""
    
class AssignmentStatement inherits from ASTBase
  method parse()
    me.lvalue   = me.req UnaryExpression
    me.lvalue.can_be_lvalue = yes
    me.assignOp = me.req 'LITERAL'
    me.error('invalid operator ' + me.assignOp.value) when (not (me.assignOp.value in ['+','-','*','/','=']))
    if me.assignOp.value isnt '='
      me.req_val '='
    me.lock()
    me.error('invalid assignment - the left side must be assignable') except when (me.lvalue.is_lvalue())
    me.rvalue   = me.req Expression
    me.req 'NEWLINE'
    me.conditional = me.rvalue.transform_when_statement()
    
class ExpressionStatement inherits from ASTBase
  method parse()
    me.expr = me.req Expression
    
class BlankStatement inherits from ASTBase
  method parse()
    me.req 'NEWLINE'
    
class BinOp inherits from ASTBase
  method parse()
    me.op = me.req 'IDENTIFIER', 'LITERAL'
    if me.op.type is 'LITERAL'
      me.error("unexpected operator #{me.op.value}") when (me.op.value in [')',']','}',';',':',','])
      me.lock()
      me.error("unexpected operator #{me.op.value}") except when (me.op.value in ['+','-','*','/','>','<'])
    else
      me.error("unexpected operator #{me.op.value}") except when (me.op.value in ['and','but','or','xor','in','is','isnt','instanceof','of'])
      
class Expression inherits from ASTBase
  method transform_when_statement()
    if me.conditional exists and me.conditional.false_expr doesnt exist
      rv = me.conditional
      me.conditional = undefined
      return rv
    else
      return undefined
  method parse()
    me.left  = me.req UnaryExpression
    me.left.can_be_lvalue = no
    me.op    = me.opt BinOp
    me.lock()
    if me.op exists
      me.right = me.req Expression
    me.conditional = me.opt WhenExpression
    
class UnaryExpression inherits from ASTBase
  method is_lvalue()
    return no except when (me.can_be_lvalue)
    return no when (me.base.constructor in [NumberConstant, StringConstant, RegexConstant])
    return no when (me.base.value in KEYWORDS)
    for accessor in me.accessors
      return no when (accessor instanceof FunctionCall)
    return yes
  method parse()
    me.preop      = me.opt_val 'not', 'new'
    me.base        = me.req ParenExpression, ListExpression, MapExpression, FunctionExpression, NumberConstant, StringConstant, RegexConstant, 'IDENTIFIER'
    me.accessors   = me.opt_multi IndexExpression, FunctionCall, PropertyAccess, ExisentialCheck
    
class ExisentialCheck inherits from ASTBase
  method parse()
    op = me.req_val 'exists', '?', 'doesnt'
    me.lock()
    if op.value is 'doesnt'
      me.req_val 'exist'
      me.invert = yes
    else
      me.invert = no
      
class WhenExpression inherits from ASTBase
  method parse()
    me.specifier  = me.req_val 'when', 'except', 'if', 'unless'
    me.lock()
    me.req_val('when') if me.specifier.value is 'except'
    me.condition  = me.req Expression
    me.false_expr = me.req(Expression) when (me.opt_val 'otherwise', 'else')
    
class NumberConstant inherits from ASTBase
  method parse()
    me.token = me.req 'NUMBER'
    
class StringConstant inherits from ASTBase
  method parse()
    me.token = me.req 'STRING'
    
class RegexConstant inherits from ASTBase
  method parse()
    me.token = me.req 'REGEX'
    
class IndexExpression inherits from ASTBase
  method parse()
    op = me.req_val '[', '?'
    me.exisential = (op.value is '?')
    me.req_val('[') when me.exisential
    me.lock()
    me.expr = me.req Expression
    me.req_val ']'
    
class PropertyAccess inherits from ASTBase
  method parse()
    op = me.req_val '.', '?'
    me.exisential = (op.value is '?')
    me.req_val('.') when me.exisential
    me.lock()
    me.expr = me.req 'IDENTIFIER'
    
class FunctionCallArgument inherits from ASTBase
  method parse()
    me.val = me.req Expression
    me.lock()
    if me.req_val(',',')').value is ')'
      me.ts.prev()
      
class FunctionCall inherits from ASTBase
  method parse()
    op = me.req_val '(', '?'
    me.exisential = (op.value is '?')
    me.req_val('(') when me.exisential
    me.lock()
    me.arguments = me.opt_multi FunctionCallArgument
    me.req_val ')'
    
class ParenExpression inherits from ASTBase
  method parse()
    me.req_val '('
    me.lock()
    me.expr = me.req Expression
    me.req_val ')'
    
class ListExpression inherits from ASTBase
  method parse()
    me.req_val '['
    me.lock()
    me.items = []
    item = me.opt Expression
    while item
      me.items.push item
      if me.opt_val ','
        item = me.opt Expression
      else
        item = null
    me.req_val ']'
    
class MapItem inherits from ASTBase
  method parse()
    me.key = me.req Expression
    me.req_val ':'
    me.lock()
    me.val = me.req Expression
    me.end_token = me.req_val ',', '}'
    if me.end_token.value is '}'
      me.ts.prev()
      
class MapExpression inherits from ASTBase
  method parse()
    me.req_val '{'
    me.lock()
    me.items = me.opt_multi MapItem
    me.req_val '}'
    
class Ellipsis inherits from ASTBase
  method parse()
    me.req_val '.'
    me.req_val '.'
    me.req_val '.'
    
class FunctionDefArgument inherits from ASTBase
  method parse()
    me.name = me.req 'IDENTIFIER'
    me.lock()
    if me.req_val(',',')').value is ')'
      me.ts.prev()
    
class FunctionExpression inherits from ASTBase
  method parse()
    me.specifier = me.req_val 'function', 'method'
    me.lock()
    me.name = me.opt 'IDENTIFIER'
    me.req_val '('
    me.arguments = me.opt_multi FunctionDefArgument
    me.req_val ')'
    me.block = me.req Block
    
class ClassDefinition inherits from ASTBase
  method parse()
    me.req_val 'class'
    me.lock()
    me.name = me.opt 'IDENTIFIER'
    if me.opt_val 'inherits'
      me.req_val 'from'
      me.parent = me.req 'IDENTIFIER'
    me.block = me.req Block
    
class TryCatch inherits from ASTBase
  method parse()
    me.req_val 'try'
    me.lock()
    me.try_block = me.req Block
    if me.opt_val 'catch'
      me.identifier = me.req 'IDENTIFIER'
      me.catch_block = me.req Block
      
Nodes = [File,Block,Statement,ReturnStatement,IfStatement,ElseStatement,WhileStatement,ForStatement,DeclarationStatement,AssignmentStatement,ExpressionStatement,BlankStatement,BinOp,Expression,UnaryExpression,ExisentialCheck,WhenExpression,NumberConstant,StringConstant,RegexConstant,IndexExpression,PropertyAccess,FunctionCallArgument,FunctionCall,ParenExpression,ListExpression,MapItem,MapExpression,Ellipsis,FunctionDefArgument,FunctionExpression,ClassDefinition,TryCatch]

exports.Grammar = {}
for v in Nodes 
  if v.__super__?.constructor is ASTBase
  exports.Grammar[v.name] = v
exports.GrammarRoot = exports.Grammar.File
exports.KEYWORDS = KEYWORDS

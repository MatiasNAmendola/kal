grammar = require './grammar'
GrammarRoot = grammar.GrammarRoot
Grammar = grammar.Grammar

exports.Grammar = Grammar
function parse(tokens, comments)
  ts = new TokenStream(tokens, comments)
  AST = new GrammarRoot(ts)
  return AST

exports.parse = parse

class TokenStream
  method initialize(tokens, comments)
    me.tokens = tokens
    me.comments = comments
    me.goto_token 0
    
  method next()
    return me.goto_token me.index+1
  
  method prev()
    return me.goto_token me.index-1
  
  method peek(delta_index)
    me.goto_token me.index + delta_index
    token = me.current
    me.goto_token me.index - delta_index
    return token
  
  method goto_token(index)
    me.index = index
    if me.index > me.tokens.length - 1
      me.current = {type: 'EOF', text: '', line: 0, value: ''}
    else if me.index < 0
      throw('Parser Error: tried to read before beginning of file')
    else
      me.current = me.tokens[me.index]
    me.type = me.current.type
    me.text = me.current.text
    me.value = me.current.value
    me.line = me.current.line
    return me.current
    
sugar     = require './sugar'
lexer     = require './lexer'
parser    = require './parser'
generator = require './generator'

exports.VERSION = '0.4.3'

function compile(code, options)
  if options doesnt exist
    options = {bare:no}
  
  try
    token_rv = lexer.tokenize code
    raw_tokens = token_rv[0]
    comments   = token_rv[1]
    
    tokens = sugar.translate_sugar raw_tokens, options, lexer.tokenize
    root_node = parser.parse tokens, comments, options
    generator.load parser.Grammar
    return root_node.js(options)
  catch e
    throw e.message or e
exports.compile = compile

if require.extensions
  require.extensions['.kal'] = (module, filename) ->
    content = compile(require('fs').readFileSync(filename, 'utf8'),{filename:filename})
    module._compile(content, filename)

exports.eval = (code, options) ->
  options = {} if options doesnt exist
  code = code.toString().trim()
  return when code is ""
  o = {}
  for k of options
    o[k] = options[k]
  js = compile code, o
  console.log(js) when options.show_js
  vm   = require 'vm'
  path = require 'path'
  if options.sandbox
    sandbox = exports.makeSandbox(options) if options.sandbox is yes otherwise options.sandbox
    return vm.runInContext js, sandbox
  else
    return vm.runInThisContext js

exports.makeSandbox = (options) ->
  vm   = require 'vm'
  path = require 'path'
  sandbox = vm.createContext(global)
  sandbox.__filename = options?.filename or 'eval'
  sandbox.__dirname  = path.dirname sandbox.__filename
  Module = require 'module'
  _module  = new Module(options?.modulename or 'eval')
  sandbox.module  = _module
  _require = (path) ->
    return Module._load path, _module, true
  sandbox.require = _require
  _module.filename = sandbox.__filename
  for r in Object.getOwnPropertyNames(require)
    if r isnt 'paths'
      _require[r] = require[r]
  # use the same hack node currently uses for their own REPL
  _module.paths = Module._nodeModulePaths process.cwd()
  _require.paths = _module.paths
  _require.resolve = (request) ->
    return Module._resolveFilename request, _module
  return sandbox
describe 'Parallel Block', ->
  it 'should accept wait fors in a parallel block', (done) ->
    task callbacker1 (arg1)
      return arg1 + 1
    task callbacker2 (arg1)
      return arg1 + 2
    run in parallel
      wait for x from callbacker1 5
      wait for y from callbacker2 5
    x.should.equal 6
    y.should.equal 7
    done()

  it 'should execute tasks in parallel', (done) ->
    cb1_done = no
    cb2_done = no
    task cb1()
      until cb2_done
        pause for 0.001 seconds
      cb1_done = cb2_done
      return 2
    task cb2()
      pause for 0.005 seconds
      cb2_done = yes
      return 1
    run in parallel
      wait for a from cb1()
      wait for b from cb2()
    a.should.equal 2
    b.should.equal 1
    cb1_done.should.be.true
    cb2_done.should.be.true
    done()

  it 'should support tasks with no return values', (done) ->
    cb1_done = no
    cb2_done = no
    task cb1()
      until cb2_done
        pause for 0.001 seconds
      cb1_done = cb2_done
      return 2
    task cb2()
      pause for 0.005 seconds
      cb2_done = yes
      return 1
    run in parallel
      wait for cb1()
      wait for cb2()
    cb1_done.should.be.true
    cb2_done.should.be.true
    done()

  it 'should support `safe` and error handling', (done) ->
    task cb1()
      throw 'ish'
    task cb2()
      return 2
    error_happened = no
    try
      run in parallel
        wait for x from cb1()
        wait for y from cb2()
    catch error
      error_happened = yes
      error[0].should.equal 'ish'
      (error[1] doesnt exist).should.be.true
    error_happened.should.be.true
    y.should.equal 2
    y = 0
    run in parallel
      safe wait for x from cb1()
      wait for y from cb2()
    x.should.equal 'ish'
    y.should.equal 2
    done()

  it 'should consider the `wait for` prefix optional', (done) ->
    x = 0
    task c1()
      x = 1
      return 1
    task c2()
      return 2, 5
    task c3()
      return 3, 4
    run in parallel
      c1()
      wait for y, yy from c2()
      z, zz from c3()
    x.should.equal 1
    y.should.equal 2
    yy.should.equal 5
    z.should.equal 3
    zz.should.equal 4
    done()

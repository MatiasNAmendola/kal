Kal = require '../compiled/kal'

describe 'Other', ->
  it 'should be able to handle empty lines with arbitrary indentation', ->
    b = Kal.eval 'a = 4\n  \nb = 2\nif a is 2\n  b = 3\n\n  b = 4\n\r\v\t   \r\nb', {sandbox:yes,bare:yes}
      
    b.should.equal 2
    
  it 'should be able to handle trailing spaces on a line', ->
    a = Kal.eval 'a = 4  \nb = 2\t\r\na', {sandbox:yes,bare:yes}
    a.should.equal 4
  
  it "should be able to handle autoparenthesis around list expressions", -> #gh-35
    a = [1,2,3,4]
    b = [x+1 for x in a]
    a.should.eql [1,2,3,4]
    b.should.eql [2,3,4,5]
  
  it "should support coffee-style list definitions (no commas/flexible whitespace)", -> #gh-9
    a = [1, 2
         3
         4,
         5]
    a.should.eql [1,2,3,4,5]
  
  #gh-47
  it 'should correctly support chained conditionals', ->
    t1 = {'callback':1,'is_else_if':yes,'isnt_else_if':no}
    if t1.callback isnt 5 but not t1.is_else_if
      require('should').fail('chained conditional failed')
    if t1.callback isnt 1 but not t1.is_else_if
      require('should').fail('chained conditional failed')
    if t1.callback isnt 5 but not t1.isnt_else_if
      a = 0 #ok, do nothing
    else
      require('should').fail('chained conditional failed')
    rv = "aaa"
    a = "test"
    t1.some_func = ->
      return 'stuff'
    rv += a + t1.some_func() when t1.callback exists
    rv.should.equal "aaateststuff"
    rv += a + t1.some_func() when t1.garbage exists
    rv.should.equal "aaateststuff"
    rv += a + a + t1.some_func() when (no)
    rv.should.equal "aaateststuff"
  
  #gh-41
  it 'should be able to handle function calls at the end of a file', ->
    b = Kal.eval 'function test(a)\n  return a + 5\ntest 3', {sandbox:yes,bare:yes}
    b.should.equal 8

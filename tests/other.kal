Kal = require '../compiled/kal'

describe 'Other', ->
  it 'should be able to handle empty lines with arbitrary indentation', ->
    b = Kal.eval 'a = 4\n  \nb = 2\nif a is 2\n  b = 3\n\n  b = 4\n\r\v\t   \r\nb', {sandbox:yes,bare:yes}

    b.should.equal 2

  it 'should be able to handle trailing spaces on a line', ->
    a = Kal.eval 'a = 4  \nb = 2\t\r\na', {sandbox:yes,bare:yes}
    a.should.equal 4

  it "should be able to handle autoparenthesis around list expressions", -> #gh-35
    a = [1,2,3,4]
    b = [x+1 for x in a]
    a.should.eql [1,2,3,4]
    b.should.eql [2,3,4,5]

  it "should support coffee-style list definitions (no commas/flexible whitespace)", -> #gh-9
    a = [1, 2
         3
         4,
         5]
    a.should.eql [1,2,3,4,5]

  #gh-46
  it "should support coffee-style object declarations", ->
    d = Kal.eval "d =\n  x:2\n  y:\n    a:1\n    b:\n      n:'hey',m:'you'\n  'z':[1\n    2\n    3]\nd", {sandbox:yes,bare:yes}
    expect = {x:2,y:{a:1,b:{n:'hey',m:'you'}},z:[1,2,3]}
    expect.should.eql d

  #gh-47
  it 'should correctly support chained conditionals', ->
    t1 = {'callback':1,'is_else_if':yes,'isnt_else_if':no}
    if t1.callback isnt 5 but not t1.is_else_if
      require('should').fail('chained conditional failed')
    if t1.callback isnt 1 but not t1.is_else_if
      require('should').fail('chained conditional failed')
    if t1.callback isnt 5 but not t1.isnt_else_if
      a = 0 #ok, do nothing
    else
      require('should').fail('chained conditional failed')
    rv = "aaa"
    a = "test"
    t1.some_func = ->
      return 'stuff'
    rv += a + t1.some_func() when t1.callback exists
    rv.should.equal "aaateststuff"
    rv += a + t1.some_func() when t1.garbage exists
    rv.should.equal "aaateststuff"
    rv += a + a + t1.some_func() when (no)
    rv.should.equal "aaateststuff"

  #gh-41
  it 'should be able to handle function calls at the end of a file', ->
    b = Kal.eval 'function test(a)\n  return a + 5\ntest 3', {sandbox:yes,bare:yes}
    b.should.equal 8

  #gh-28
  it 'should correctly add parentheses to strings with embedded code', ->
    function tester(a,b)
      return a + b
    c = "test"
    r = tester "this is a #{c}", " of strings"
    r.should.equal "this is a test of strings"

  #gh-33
  it 'should support the pass statement for blank statements', ->
    pass
    a = 1
    function tttt()
      pass
    tttt()
    pass
    a.should.equal 1

  it 'should alias print to console.log', ->
    print.should.equal console.log

  it 'should handle if statements after object definitions', -> #gh-72
    jen =
      name: 'Jen'
      age: 27
      clearance: 'None'

    if jen.age is 27
      x = 'Jen is 27'
    x.should.equal 'Jen is 27'

  it 'should handle functions as members of map definitions', -> #gh-80
    obj =
      name: 'object'
      fun: function ()
        return 2
      other: 3
    obj.fun().should.equal 2
    obj.name.should.equal 'object'
    obj.other.should.equal 3
    obj =
      fun: function ()
        return 5
    obj.fun().should.equal 5
    obj =
      name: 'object 3'
      fun: ->
        return 99
      other: 3
    obj.fun().should.equal 99
    obj.name.should.equal 'object 3'
    obj.other.should.equal 3
